name: Set PR Title

on:
  workflow_call:
    secrets:
      token:
        description: "The GitHub token used by that repository where the pull request needs to be updated"
        required: true
    inputs:
      REPO:
        type: string
        required: true
      PULL_NUMBER:
        type: string
        required: true
      owner:
        description: "The owner or organization of the repository"
        type: string
        required: false
        default: lightzane
      accept_values:
        description: "Comma or pipe-separated list of acceptable values"
        type: string
        required: false
        default: "test_me | test_all"

env:
  GH_API_VERSION: "2022-11-28"  
  OWNER: ${{ inputs.owner }}
  REPO: ${{ inputs.REPO }}
  PULL_NUMBER: ${{ inputs.PULL_NUMBER }}
  PR_TITLE: '' # to be populated later
  GH_TOKEN: ${{ secrets.token }} # Make sure token NOT expired (e.g. ghp_ab8CDEFghIjKLM0nOpw4H1ZUQAHrqW26aaag)
  # Token nust have scopes: public_repo, read:discussion, read:org

jobs:
  set_title:
    runs-on: ubuntu-latest
    steps:
      # Reference: https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#get-a-pull-request
      - name: Get title of pull request
        run: |
          response=$(
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "X-GitHub-Api-Version: $GH_API_VERSION" \
              https://api.github.com/repos/$OWNER/$REPO/pulls/$PULL_NUMBER
          )

          PR_TITLE=$(echo "$response" | jq -r '.title')

          if [ -z "$PR_TITLE" ] || [ "$PR_TITLE" = "null" ]; then
            echo "$response"
            echo "PR TITLE not found. Please run this workflow via pull_request event"
            exit 1
          fi

          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
            
      - name: Set env var
        run: |
          echo "ACCEPT_VALUES=${{ inputs.accept_values }}" >> $GITHUB_ENV
   
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Process acceptable values
        run: |
          # ðŸ‘‰ Replace pipe characters with commas for uniform splitting
          ACCEPT_VALUES=$(echo "$ACCEPT_VALUES" | sed 's/|/,/g')

          # ðŸ‘‰ Remove extra spaces around values
          ACCEPT_VALUES=$(echo "$ACCEPT_VALUES" | sed 's/ ,/,/g; s/, /,/g')

          # [START] What is "sed"? =============================================================================
          #
          #   sed stands for Stream Editor. 
          #   It is a powerful command-line tool used for parsing and transforming text data in Unix-based systems.
          #   sed is commonly used for tasks such as searching, find-and-replace operations, text deletion, 
          #   and insertion, among other text manipulation tasks.
          #
          #   ðŸ’¡ How sed Works
          #
          #   Basic Syntax: sed 'script' file
          #     -  script is a set of editing commands.
          #     -  file is the file to be processed. If no file is provided, sed reads from standard input.
          #
          #   Editing Commands:
          #     -  s/pattern/replacement/flags: Substitutes pattern with replacement.
          #     -  d: Deletes lines.
          #     -  i\text: Inserts text before a line.
          #
          #   Example:
          #     $ echo "Hello World" | sed 's/e/a/g'
          #     Hallo World
          #
          # [END] What is "sed"? =============================================================================

          # ðŸ‘‰ Split by comma (IFS -> Internal Field Separator is special built-in variable by shell, determines how input is split into fields)
          IFS=',' read -r -a my_values <<< "$ACCEPT_VALUES"

          # ðŸ’¡
          #   -r flag prevents backslashes from being treated as escape characters
          #   -a lag specifies that the input should be read into an array named "my_values"
          #   <<< "$ACCEPT_VALUES": This is a here-string that provides the value of ACCEPT_VALUES as input to the read command

          # ðŸ‘‰ Check each values whether PR title contains the accepted values
          for value in "${my_values[@]}"; do
            TRIMMED_VALUE=$(echo "$value" | xargs) # xargs is used here to clean up extra spaces around the value

            # [[ ... ]] - conditional experssion used for string comparison
            # The ( * ) wildcard allows for any characters before and after TRIMMED_VALUE.
            # This will check that PR_TITLE contains TRIMMED_VALUE as a substring

            if [[ "$PR_TITLE" == *"$TRIMMED_VALUE"* ]]; then 
              echo "TITLE_ACCEPTED=true" >> $GITHUB_ENV
              exit 0
            fi
          done

          echo "TITLE_ACCEPTED=false" >> $GITHUB_ENV

      - name: Rename PR title IF acceptable values are missing
        # if: contains(steps.get_pr_title.outputs.PR_TITLE, 'test_me') == false
        if: env.TITLE_ACCEPTED == 'false'
        run: |
          NEW_TITLE="$PR_TITLE test_me"
          
          # Update a pull request
          # Reference: https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#update-a-pull-request

          response=$(
            curl -L \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "X-GitHub-Api-Version: $GH_API_VERSION" \
              https://api.github.com/repos/$OWNER/$REPO/pulls/$PULL_NUMBER \
              -d '{"title":"$NEW_TITLE"}'
              
              # -d '{"title":"new title","body":"updated body","state":"open","base":"master"}'
          )

          echo "$response"
